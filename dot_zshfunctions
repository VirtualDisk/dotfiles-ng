## FUNCTIONS ##

tmuxpl()  {
  tmuxp load "$(find ${HOME}/.tmuxp/ -type f | fzf)"
}

zop() {
    while [[ ! $(pgrep 'Docker Desktop') ]];  do
        open "/Applications/Docker.app"
        echo "Docker desktop is not open. Waiting for Docker to start..."
        sleep 8
    done

    docker-compose --file ${ZOEREPO}/docker/onepassword/docker-compose.yaml up -d
    export OP_CONNECT_TOKEN=$(op item get 'zoe Access Token terraform' |yq .Fields.credential)
}

tfix() {
    PREVDIR="$(pwd | rev| awk -F / '{print $1}' | rev)"
    cd ..
    # docker run -it -v $(pwd):/terraform -v "${HOME}/.aws:/root/.aws" --platform=linux/amd64 virtualdisk/terraform "/usr/bin/terraform"
    docker run -it -v $(pwd):/terraform -v "${HOME}/.aws:/root/.aws" --platform=linux/amd64 virtualdisk/terraform "-chdir=/terraform/${PREVDIR} init"
    cd "${PREVDIR}"
}

tfax() {
    PREVDIR="$(pwd | rev| awk -F / '{print $1}' | rev)"
    cd ..
    docker run -it -v "${HOME}/.kube":"/root/.kube" -v "${HOME}/.ssh":"/root/.ssh" -v $(pwd):/terraform --platform=linux/amd64 hashicorp/terraform "-chdir=/terraform/${PREVDIR}" apply
    cd "${PREVDIR}"
}

tfaxd() {
    PREVDIR="$(pwd | rev| awk -F / '{print $1}' | rev)"
    cd ..
    docker run -e TF_LOG="DEBUG" -it -v "${HOME}/.kube":"/root/.kube" -v "${HOME}/.ssh":"/root/.ssh" -v $(pwd):/terraform --platform=linux/amd64 hashicorp/terraform "terraform init -chdir=/terraform/${PREVDIR}" apply
    cd "${PREVDIR}"
}

findreplace() {
    echo "Find and replace in current directory!"
    echo "File pattern to look for? (eg '*.txt')"
    read filepattern
    echo "Existing string?"
    read existing
    echo "Replacement string?"
    read replacement
    echo "Replacing all occurences of $existing with $replacement in files matching $filepattern"

    find . -type f -name $filepattern -print0 | xargs -0 sed -i '' -e "s#$existing#$replacement#g"
}
n2ip () {
        aws ec2 describe-instances --filters "Name=tag:Name,Values=*${1}*" Name=instance-state-name,Values=running | jq -r '.Reservations[].Instances[] | [.NetworkInterfaces[0].PrivateIpAddress, (.Tags[] | select(.Key == "Name").Value),(.InstanceId),(.LaunchTime),(.InstanceType),(.ImageId)] | join("\t")'
}

find-asg-instance-ids () {
        local _asg _instances _instance_ids _name
        _name="${1:-.*}"
        _asg=("${(@f)$(_find-asgs ${_name})}")
        _instance_ids=("${(@f)$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${_asg[@]} | jq -er '.AutoScalingGroups[].Instances[].InstanceId')}")
        _instances="$(aws ec2 describe-instances --instance-ids ${_instance_ids[@]} | jq -er '.Reservations[].Instances[] | .PrivateDnsName + " " + .InstanceId')"
        echo "${_instances}" | fzf | awk '{print $2}'
}

_find-asgs () {
        find-asgs "${1}" | fzf -m
}

cdfzf() {
  local REPOS="$(find ~/${1:-"~"} -type d -depth 1 | sed "s#$HOME/${1}/##g")"
  local SELECTION="$(echo $REPOS | fzf)"
  cd "${HOME}/${1}/${SELECTION}" 
}

c() {
    local dadir=${HOME}/$(cd && fzf|rev|cut -d'/' -f2- |rev)
    cd "${dadir}" 
}

v() {
    local dafile=${HOME}/$(cd && fzf)
    local dadir="$(echo ${dafile}|rev|cut -d'/' -f2- |rev)"
    nvim "${dafile}"
    cd "${dadir}"
}

kn() {
    if [[ $(kubectl get ns "${1}" 2>/dev/null) ]]; then
        /usr/local/bin/kubectl config set-context --current --namespace="${1}"
    elif [[ -z "${1}" ]]; then
        kubectl config set-context --current --namespace="$(kubectl get ns |grep -v 'NAME'|fzf|awk '{print $1}')"
    else
        echo "invalid namespace"
    fi
}

helm-fan-out() {
if [ -z "$1" ]; then
    echo "Please provide an output directory"
    exit 1
fi

awk -vout=$1 -F": " '
   $0~/^# Source: / {
       file=out"/"$2;
       if (!(file in filemap)) {
           filemap[file] = 1
           print "Creating "file;
           system ("mkdir -p $(dirname "file"); echo -n "" > "file);
       }
   }
   $0!~/^#/ {
       if (file) {
           print $0 >> file;
       }
   }'
}


kc() {
    context="$(cat $(echo $KUBECONFIG) |ag -C 3 context: |ag name: |awk '{print $2}'|sort |uniq |fzf)"
    /usr/local/bin/kubectl config use-context "${context}"
}

kcrm() {
    if [[ -z "${1}" ]]; then
        echo "usage: kcrm <context name>"
        return
    else
        kubectl config delete-cluster "${1}"
        kubectl config delete-context "${1}"
        kubectl config unset "users.${1}"
    fi
}

tc() {
    contexts=$(cat <<-EOF
grapefruit
EOF
)
    context="$(echo ${contexts} |fzf)"
    talosctl config context "${context}"
}

# kubectl() {
#     # only sort if we are listing objects
#     if [[ $(echo "${@}" |ag "get all") ]]; then
#      /usr/local/bin/kubectl "${@}"
#     elif [[ $(echo "${@}" |ag "get") ]]; then
#      /usr/local/bin/kubectl "${@}" |sort --numeric-sort
#     else
#      /usr/local/bin/kubectl "${@}"
#     fi
# }

ips() {
    kubectl get svc -A | ag '192' | awk '{print $5 " " $2}' | sort -n
}


export AWS_SDK_LOAD_CONFIG=true
#export AWS_DEFAULT_PROFILE="dev.use1"

aws-vault-use() {
    local profile output

    profile="$1"

    output="$(aws-vault exec "$profile" -- env)"
    if [[ $? -ne 0 ]]; then
        echo "$output" >&2
        return 1
    fi

    eval "$(echo "$output" | awk '/^AWS/ && !/^AWS_VAULT/ { print "export " $1 }')"
}

flipstate () {
        to_local () {
                echo "Moving state to local"
                if mv _state.tf _state.tf.local
                then
                        echo "Done"
                        return 0
                else
                        echo "Failed"
                        return 1
                fi
        }
        to_remote () {
                echo "Moving state to remote"
                if mv _state.tf.local _state.tf
                then
                        echo "Done"
                        return 0
                else
                        echo "Failed"
                        return 1
                fi
        }
        if [[ $# -eq 1 ]]
        then
                case "$1" in
                        (local) to_local ;;
                        (remote) to_remote ;;
                esac
        else
                if [[ -f "_state.tf" ]]
                then
                        to_local
                else
                        to_remote
                fi
        fi
}

param () {
	aws ssm get-parameters --with-decryption --names "$(aws ssm get-parameters-by-path --path / --recursive \
  | jq -r '.Parameters[].Name' | fzf)" | jq -er '.Parameters[].Value' | pbcopy
}

get_command_output() {
    aws ssm list-command-invocations \
        --command-id "${1}" \
        --details \
    | jq -r '.CommandInvocations[].CommandPlugins[].Output'
}

tfstatemove() {
    for i in "$(terraform state list |ag 'rbac.kubernetes')"; do
        echo "terraform state mv $i $(echo $i | sed 's/rbac.kubernetes/rbac-okta.kubernetes/g')"
    done

}

taintmodule() {
  #excluded_resources=('google_compute_address.ip_address')
  excluded_resources=('google_compute_address.ip_address' 'google_compute_disk')

  echo "Tainting all resources in ${module} excluding ${excluded_resources[*]}"
  read -p "Press [Enter] key to start..."

  for resource in $(terraform state list |                    # Get a list of all the 'resources'
                      grep "^module.${module}" |          # Filter to the specific module
                      grep -v "\.module\." |              # Ignore sub modules
                      sed "s/module\.${module}\.//g" |    # replace the module.* to get resource sans module prefix
                      sed -E "s/\[(.*)\]/.\1/g"           # replace the [#] suffix with .# (needed by taint command)
                      ); do
    if array_contains excluded_resources ${resource}; then
      echo "<<< Skipping ${resource} >>>"
    else
        echo "--- Tainting ${resource} ---"
        bash -c "terraform taint --module=${module} `echo ${resource} | tr -d '[:space:]'`"
    fi
  done
}

wake() {
  case $1 in
    nuc1)
      wakeonlan 1c:69:7a:ab:ad:50
      ;;
    nuc2)
      wakeonlan 88:ae:dd:04:10:2a
      ;;
    nuc3)
      wakeonlan 88:ae:dd:04:99:f2
      ;;
    nuc4)
      wakeonlan 1c:69:7a:ab:09:4b
      ;;
    nuc5)
      wakeonlan 88:ae:dd:04:0d:b1
      ;;
    nuc6)
      wakeonlan 88:ae:dd:0a:9f:2d
      ;;
    pc)
      wakeonlan 2c:f0:5d:9e:7e:88
      ;;
    *)
      echo "Invalid node name."
      ;;
  esac
}

